
软件工程中，设计模式是对软件设计中普遍存在（反复出现）各种问题，所提出的解决方案。这个术语是由埃里希·伽马等人在1990年从建筑设计领域引入到计算机科学的。

设计模式的目的
    编写软件过程中，程序员面临着来自耦合性、内聚性以及可维护性，可拓展性，重用性，灵活性等多方面的挑战
    设计模式是为了让程序，具有个好的
        1.代码重用性
        2.可读性
        3.可拓展性
        4.可靠性
        5.使程序呈现高内聚，低耦合的特性
设计模式常用的七大原则：
    1.单一职责原则
        对类来说的，即一个类应该只负责一项职责，如类A负责两个不同职责，职责1、职责2，
        当职责1需求变更而改变A时，可能造成职责2执行错误，所以需要将类A的粒度分解为A1、A2.

        单一职责原则注意事项和细节
            1.降低类的复杂度，一个类只负责一项职责
            2.提高类的可读性，可维护性
            2.降低变更引起的风险
            4.通常情况下，我们应当遵守单一职责原则，只有逻辑则够简单，才可以在代码级违反单一职责原则；只有类中方法数量足够少，可以在方法级别保持单一职责原则
    2.接口隔离原则
        客户端不应该依赖它不需要的接口，即一个类对另一个类的依赖应该建立在最小接口上
    3.依赖倒转原则
        1.高层模块不应该依赖底层模块，二者都应该依赖其抽象
        2.抽象不应该依赖细节，细节应该依赖抽象
        3.依赖倒转的中心思想时面向接口编程
        4.依赖倒转原则是基于这样的设计理念：相对于细节的多变性，抽象的东西要稳定的多。在Java中，抽象指的是接口或抽象类，细节就是具体的实现类
        5.使用接口或抽象类的目的是指定好规范，而不涉及任何具体的操作，把展现细节的任务交给他们的实现类去完成。
        *依赖关系传递的三种方式
            1.接口传递
            2.构造方法传递
            3.setter方式传递
        依赖倒转原则的注意事项和细节
            1.底层模块尽量都要有抽象类或接口，或者两者都有，程序稳定性更好
            2.变量的声明类尽量是抽象类或接口，这样我们的变量引用和实际对象间，就存在一个缓冲层，利于程序拓展和优化
            3.继承时遵循里氏替换原则。
    4.里氏替换原则
    5.开闭原则ocp
    6.迪米特法则
    7.合成复用原则